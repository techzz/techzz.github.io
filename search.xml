<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[算法导论]]></title>
    <url>%2F2019%2F01%2F09%2F%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[渐进符号O：&lt;=, n^2+O(n)=O(n^3) Ω：&gt;=, √n=Ω(lgn) ω: &gt; , o: &lt; , 2n^2=o(n^3) Θ: = : n^2=Θ(n^2) 递归复杂度 代换法（数学归纳法） 递归树 主方法（有限制）：递归方程形如 T(n)=aT(n/b)+f(n) a&gt;=1,b&gt;1 f(n)=O(n^(logba-ε)) T(n)=Θ(n^logba) f(n)=Θ(n^logba*(lgn)^k) T(n)=Θ(n^logba*(lgn)^(k+1)) f(n)=Ω(n^(logba+ε)) &amp;&amp; af(n/b)&lt;=(1-ε’)f(n) T(n)=Θ(f(n))(0&lt;ε&lt;logba,,0&lt;ε’&lt;1,k&gt;=0 常数) 分治法 归并排序 二分查找 乘方定理 普通相乘 T(n)=Θ(n) 分而治之 n=even,x^n=x^(n/2)*x^(n/2) n=odd,x^n=x^(n-1/2)*x^(n-1/2)*x T(n)=Θ(lgn) 斐波那契数列 普通递归 T(n)=Θ(φ^n) φ为黄金分割比 从F1到Fn T(n)=Θ(n) Fn=φ^n/√5 T(n)=Θ(lgn) (会发生精度丢失) 2×2矩阵((Fn+1),Fn),(Fn,Fn-1))=((1,1),(1,0))^n T(n)=Θ(lgn)3,4运用乘方定理 矩阵乘法（C=A×B） 普通运算 T(n)=Θ(n^3) n×n矩阵转化成 4个 n/2×n/2 矩阵T(n)=8T(n/2)+Θ(n^2)==&gt;T(n)=Θ(n^3) Strassen’s AlgorithmT(n)=7T(n/2)+Θ(n^2)==&gt;T(n)=Θ(n^2.81) VLSI 二叉树画法 H(n)=H(n/2)+Θ(1)==&gt;H(n)=Θ(lgn) W(n)=2W(n/2)+Θ(1)==&gt;W(n)=Θ(n) T(n)=H(n)*W(n)=Θ(nlgn) H型画法 H(n)=2H(n/4)+Θ(1)==&gt;H(n)=Θ(√n)W(n)=2W(n/4)+Θ(1)==&gt;W(n)=Θ(√n)T(n)=H(n)*W(n)=Θ(n) 分治法也是一种递归，可通过递归复杂度的计算方法构造不同的分治思路 排序 基于比较排序模型（决策树） 冒泡排序 O(n^2) 稳定 O(1) 插入排序 O(n^2) 稳定 O(1) 选择排序 O(n^2) 不稳定 O(1) 快速排序 O(nlgn) 不稳定 O(lgn) 最坏O(n^2) 平均O(nlgn) &lt;– 随机化算法 希尔排序 O(nlgn) 不稳定 O(1) 堆排序 O(nlgn) 不稳定 O(1) 归并排序 O(nlgn) 稳定 O(n) 非比较排序模型 计数排序 O(n+k) 稳定 O(k) k为n个待排序数字的最大值，当k不是很大时适用 桶排序 基数排序 O(d(n+r)) 稳定 O(n+2*r) d为最大位数，r为每一位位数的最大值]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Data Structure And Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见算法(1)]]></title>
    <url>%2F2018%2F10%2F10%2F%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95-1%2F</url>
    <content type="text"></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Data Structure And Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见算法(2)]]></title>
    <url>%2F2018%2F10%2F10%2F%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95-2%2F</url>
    <content type="text"></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Data Structure And Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构与算法例题]]></title>
    <url>%2F2018%2F05%2F24%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[线性表:快慢指针(2倍)循环链表:约瑟夫环，魔术师发牌问题，拉丁方阵栈:逆波兰运算器，中缀转后缀递归:斐波那契数列，n的阶乘，反向输出任意长度的字符串，汉诺塔，八皇后分治思想:折半查找法(迭代，递归)字符串:BF算法，KMP算法(难)树:孩子双亲表示法二叉树:前序中序后序层序遍历，线索二叉树(难)，赫夫曼树，赫夫曼编码(难)图:深度优先，广度优先遍历，马踏棋盘算法(骑士周游问题)(难)最小生成树:普里姆算法，克鲁斯卡尔算法最短路径:迪杰斯特拉算法，弗洛伊德算法拓扑序列:拓扑排序，关键路径查找算法:折半查找，插值查找，斐波那契查找，线性索引查找(不做要求)排序算法:二叉排序树，平衡二叉排序树(难)，多路查找树]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>Data Structures and Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[发布步骤]]></title>
    <url>%2F2018%2F05%2F24%2F%E5%8F%91%E5%B8%83%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"><![CDATA[$ hexo clean #清除静态页面缓存（清除 public 文件夹）$ hexo g #在本地生成静态页面（生成 public 文件夹）$ hexo s #启动本地服务 http://localhost:4000(进行预览调试)$ hexo d #远程部署，同步到 GitHub$ hexo n “XX” #新建文档，地址F:\blog\source_posts(部署步骤：1-2-4)]]></content>
      <categories>
        <category>hexo发布步骤</category>
      </categories>
  </entry>
</search>
